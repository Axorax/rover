import os
import re
import sys
import time
import json
import argparse
from urllib.parse import quote

TEMPLATE = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
$seo_tags
    $meta_redirect
    $js_redirect
</head>
<body>
    If you are not redirected automatically, follow this <a href='$url'>$url</a>.
</body>
</html>
"""

def minify_html(c):
    c = re.sub(r"\s{2,}", " ", c)
    c = re.sub(r">\s*<", "><", c)
    c = re.sub(r"\s*=\s*", "=", c)
    c = re.sub(r"<!--.*?-->", "", c, flags=re.DOTALL)
    return c.strip()

def make_url_friendly(value, key=None):
    if isinstance(value, str) and ":/" in value and key in ["image", "_"]:
        before, after = value.split("://", 1)
        return before + "://" + quote(after)
    elif isinstance(value, dict):
        return {quote(str(k)): make_url_friendly(v, k) for k, v in value.items()}
    return value

def parse(content):
    result = {"redirects": {}}
    lines = [line.strip() for line in content.splitlines() if line.strip()]
    current_group = None
    current_dict = result["redirects"]
    current_parent = None
    multi_line_key = None
    multi_line_buffer = []
    inside_nested = False

    for line in lines:
        if line.startswith("[") and line.endswith("]") and not inside_nested:
            current_group = line.strip("[]")
            current_dict = result["redirects"]
        elif line == "[":
            inside_nested = True
        elif line == "]":
            if multi_line_key:
                current_dict[current_parent][multi_line_key] = "\n".join(multi_line_buffer)
                multi_line_key = None
                multi_line_buffer = []
            inside_nested = False
        elif " = " in line:
            key, value = map(str.strip, line.split(" = ", 1))
            value = value.split("#")[0].strip()

            if value == "[":
                multi_line_key = key
                multi_line_buffer = []
            elif multi_line_key:
                multi_line_buffer.append(value)
            elif inside_nested:
                if current_parent not in current_dict:
                    current_dict[current_parent] = {}
                current_dict[current_parent][key] = make_url_friendly(value, key)
            else:
                if current_group == "redirects":
                    current_dict[key] = {"_": make_url_friendly(value, "_")}
                    current_parent = key
                else:
                    result[key] = make_url_friendly(value, key)
        elif multi_line_key:
            multi_line_buffer.append(line)

    return result

def generate_html(url, title, description, image, keywords, method, minify="false"):
    meta_redirect = f'<meta http-equiv="refresh" content="0; url={url}" />' if method in ["html", "both"] else "<!-- Generated by Rover -->"
    js_redirect = f'<script type="text/javascript">window.location.href = "{url}"</script>' if method in ["js", "both"] else "<!-- Generated by Rover -->"
    seo_tags = [
        f"    <title>{title}</title>" if title else "",
        f'    <meta name="description" content="{description}" />' if description else "",
        f'    <meta property="og:image" content="{image}" />' if image else "",
        f'    <meta name="keywords" content="{keywords}" />' if keywords else "",
    ]

    seo_tags_str = "\n".join(filter(None, seo_tags))
    content = TEMPLATE.replace("$seo_tags", seo_tags_str).replace("$url", url).replace("$js_redirect", js_redirect).replace("$meta_redirect", meta_redirect)

    if minify == "true":
        content = minify_html(content)

    return content

def generate(data):
    folder = data.get("output", "rover")
    os.makedirs(folder, exist_ok=True)

    method = data.get("method", "js").lower()
    redirects = data.get("redirects", {})
    minify = data.get("minify", "false").lower()
    output_json = data.get("output json", "output.json") if data.get("json", "false").lower() == "true" else None

    if data.get("visualize", "false").lower() == "true": visualize(data, data.get("output visualize", "rover.html"))

    for key, values in redirects.items():
        url = values.get("_", "https://axorax.github.io/")
        title = values.get("title", key)
        description = values.get("description", "")
        image = values.get("image", "")
        keywords = values.get("keywords", "")

        content = generate_html(url, title, description, image, keywords, method, minify)

        file_path = os.path.join(folder, f"{key}.html")
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(content)

    if output_json:
        with open(output_json, "w", encoding="utf-8") as json_file:
            json.dump(data, json_file, indent=4)

def visualize(x, output="rover.html"):
    data = []

    for key, values in x.get("redirects", {}).items():
        data.append(
            {
                "short": key,
                "link": values.get("_", "https://axorax.github.io/"),
                "title": values.get("title", key),
                "description": values.get("description", ""),
                "image": values.get("image", ""),
                "keywords": values.get("keywords", ""),
                "method": x.get("method", ""),
                "minify": x.get("minify", ""),
            }
        )

    vis_html = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rover Visualizer</title>
    <style>.tabulator{font-size:14px;overflow:hidden;position:relative;text-align:left;-webkit-transform:translateZ(0);-moz-transform:translateZ(0);-ms-transform:translateZ(0);-o-transform:translateZ(0);transform:translateZ(0)}.tabulator[tabulator-layout=fitDataFill] .tabulator-tableholder .tabulator-table{min-width:100%}.tabulator[tabulator-layout=fitDataTable]{display:inline-block}.tabulator .tabulator-header{background-color:#e6e6e6;border-bottom:1px solid #999;box-sizing:border-box;color:#555;font-weight:700;outline:0;overflow:hidden;position:relative;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none;white-space:nowrap;width:100%}.tabulator .tabulator-header.tabulator-header-hidden{display:none}.tabulator .tabulator-header .tabulator-header-contents{overflow:hidden;position:relative}.tabulator .tabulator-header .tabulator-header-contents .tabulator-headers{display:inline-block}.tabulator .tabulator-header .tabulator-col{background:#e6e6e6;border-right:1px solid #aaa;box-sizing:border-box;display:inline-flex;flex-direction:column;justify-content:flex-start;overflow:hidden;position:relative;text-align:left;vertical-align:bottom}.tabulator .tabulator-header .tabulator-col .tabulator-col-content{box-sizing:border-box;padding:4px;position:relative}.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title-holder{position:relative}.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title{box-sizing:border-box;overflow:hidden;text-overflow:ellipsis;vertical-align:bottom;white-space:nowrap;width:100%}.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title.tabulator-col-title-wrap{text-overflow:clip;white-space:normal}.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter{align-items:center;bottom:0;display:flex;position:absolute;right:4px;top:0}.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter .tabulator-arrow{border-bottom:6px solid #bbb;border-left:6px solid transparent;border-right:6px solid transparent;height:0;width:0}.tabulator .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title{padding-right:25px}@media (hover:hover) and (pointer:fine){.tabulator .tabulator-header .tabulator-col.tabulator-sortable.tabulator-col-sorter-element:hover{background-color:#cdcdcd;cursor:pointer}}.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=none] .tabulator-col-content .tabulator-col-sorter{color:#bbb}@media (hover:hover) and (pointer:fine){.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=none] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover{border-bottom:6px solid #555;cursor:pointer}}.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=none] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow{border-bottom:6px solid #bbb;border-top:none}.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=ascending] .tabulator-col-content .tabulator-col-sorter{color:#666}@media (hover:hover) and (pointer:fine){.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=ascending] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover{border-bottom:6px solid #555;cursor:pointer}}.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=ascending] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow{border-bottom:6px solid #666;border-top:none}.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=descending] .tabulator-col-content .tabulator-col-sorter{color:#666}@media (hover:hover) and (pointer:fine){.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=descending] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover{border-top:6px solid #555;cursor:pointer}}.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=descending] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow{border-bottom:none;border-top:6px solid #666;color:#666}.tabulator .tabulator-header .tabulator-frozen{left:0;position:sticky;z-index:11}.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-right{border-left:2px solid #aaa}.tabulator .tabulator-header .tabulator-frozen-rows-holder{display:inline-block}.tabulator .tabulator-header .tabulator-frozen-rows-holder:empty{display:none}.tabulator .tabulator-tableholder{-webkit-overflow-scrolling:touch;overflow:auto;position:relative;white-space:nowrap;width:100%}.tabulator .tabulator-tableholder:focus{outline:0}.tabulator .tabulator-tableholder .tabulator-table{background-color:#fff;color:#333;display:inline-block;overflow:visible;position:relative;white-space:nowrap}.tabulator .tabulator-col-resize-handle{display:inline-block;margin-left:-3px;margin-right:-3px;position:relative;vertical-align:middle;width:6px;z-index:11}@media (hover:hover) and (pointer:fine){.tabulator .tabulator-col-resize-handle:hover{cursor:ew-resize}}.tabulator .tabulator-col-resize-handle:last-of-type{margin-right:0;width:3px}.tabulator-row{background-color:#fff;box-sizing:border-box;min-height:22px;position:relative}.tabulator-row.tabulator-row-even{background-color:#efefef}@media (hover:hover) and (pointer:fine){.tabulator-row.tabulator-selectable:hover{background-color:#bbb;cursor:pointer}}.tabulator-row .tabulator-row-resize-handle{bottom:0;height:5px;left:0;position:absolute;right:0}@media (hover:hover) and (pointer:fine){.tabulator-row .tabulator-row-resize-handle:hover{cursor:ns-resize}}.tabulator-row .tabulator-cell{border-right:1px solid #aaa;box-sizing:border-box;display:inline-block;outline:0;overflow:hidden;padding:4px;position:relative;text-overflow:ellipsis;vertical-align:middle;white-space:nowrap}.tabulator-row .tabulator-cell.tabulator-row-header{background:#e6e6e6;border-bottom:1px solid #aaa;border-right:1px solid #999}.tabulator-row .tabulator-cell.tabulator-frozen{background-color:inherit;display:inline-block;left:0;position:sticky;z-index:11}.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right{border-left:2px solid #aaa}.tabulator-row .tabulator-cell.tabulator-editing{border:1px solid #1d68cd;outline:0;padding:0}.tabulator-row .tabulator-cell.tabulator-editing input{background:0 0;border:1px;outline:0}.tabulator-row .tabulator-cell.tabulator-row-handle{align-items:center;display:inline-flex;justify-content:center;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none}*{font-family:Inter,sans-serif;margin:0;padding:0;transition:background .3s}body{background-color:#121212;color:#fff;font-size:16px;padding:0 2rem 2rem}#table{width:100%;margin-top:2rem;overflow:hidden}.tabulator .tabulator-cell{white-space:pre-wrap!important;word-break:break-word!important}.tabulator{background-color:#578e7e;color:#fff;border:1px solid #3d3d3d}.tabulator .tabulator-header{background-color:#578e7e;border-bottom:2px solid #3d3d3d}.tabulator .tabulator-header .tabulator-col{background-color:#578e7e;color:#fff;font-weight:600;padding:12px 16px;text-transform:uppercase}.tabulator .tabulator-header .tabulator-col:hover{background:#63a492!important}.tabulator .tabulator-row{background-color:#1a1a1d;color:#ffffffb0;border-bottom:1px solid #3d3d3d}.tabulator .tabulator-row:hover{background-color:#232326}.tabulator .tabulator-cell{padding:12px 16px;border-right:1px solid #3d3d3d}.tabulator .tabulator-cell:last-child{border-right:none}.tabulator .tabulator-cell .tabulator-editing input{border-radius:4px;border:1px solid #3d3d3d}</style>
    <script type="text/javascript" src="https://unpkg.com/tabulator-tables@6.3.1/dist/js/tabulator.min.js"></script>
</head>
<body>
    <div id="table"></div>
    <script>
        new Tabulator("#table", {
            data: $data,
            layout: "fitColumns",
            columns: [
                {title: "Short", field: "short"},
                {title: "Link", field: "link"},
                {title: "Title", field: "title"},
                {title: "Description", field: "description"},
                {title: "Image", field: "image"},
                {title: "Keywords", field: "keywords"},
                {title: "Method", field: "method"},
                {title: "Minify", field: "minify", formatter: "tickCross"}
            ],
            index: "short"
        });
    </script>
</body>
</html>
"""

    with open(output, "w", encoding="utf-8") as f:
        f.write(vis_html.replace("$data", json.dumps(data)))

def main():
    parser = argparse.ArgumentParser(description="Generate redirect HTML files based on a configuration file.")
    
    parser.add_argument(
        "config_file",
        metavar="CONFIG",
        type=str,
        help="Path to the configuration file (e.g., config.rvr)"
    )
    
    parser.add_argument(
        "-oj",
        "--output-json",
        metavar="JSON_FILE",
        type=str,
        help="Specify the output JSON file name (default: output.json)"
    )

    parser.add_argument(
        "-ov",
        "--output-visualizer",
        metavar="HTML_FILE",
        type=str,
        help="Specify the visualizer output file name (default: rover.html)"
    )

    parser.add_argument(
        "-v",
        "--visualize",
        metavar="TRUE | FALSE",
        type=str,
        help="Visualize the configuation file (default: false)"
    )

    parser.add_argument(
        "-j",
        "--json",
        metavar="TRUE | FALSE",
        type=str,
        help="Generate JSON output (default: false)"
    )

    parser.add_argument(
        "-m",
        "--minify",
        metavar="TRUE | FALSE",
        type=str,
        help="Minify the HTML files (default: false)"
    )

    parser.add_argument(
        "-o",
        "--output",
        metavar="FOLDER_NAME",
        type=str,
        help="Output folder name (default: rover)"
    )

    parser.add_argument(
        "-me",
        "--method",
        metavar="METHOD_NAME",
        type=str,
        help="Redirection method (default: both)"
    )

    args = parser.parse_args()

    if not os.path.exists(args.config_file):
        print(f"\033[91m[x] Configuration file '{args.config_file}' not found.\033[0m")
        sys.exit(1)

    start_time = time.time()

    try:
        with open(args.config_file, "r") as file:
            content = file.read()

        parsed_data = parse(content)

        if args.output_visualizer:
            parsed_data["output visualize"] = args.output_visualizer

        if args.output_json:
            parsed_data["output json"] = args.output_json

        if args.method:
            parsed_data["method"] = args.method.lower()

        if args.output:
            parsed_data["output"] = args.output

        if args.visualize and args.visualize.lower() == "true":
            parsed_data["visualize"] = "true"

        if args.json and args.json.lower() == "true":
            parsed_data["json"] = "true"

        if args.minify and args.minify.lower() == "true":
            parsed_data["minify"] = "true"

        generate(parsed_data)

        end_time = time.time()
        elapsed_time_ms = round((end_time - start_time) * 1000, 2)

        print(f"\033[92m[*] Done in {elapsed_time_ms} ms.\033[0m")

    except Exception as e:
        print(f"\033[91mError: {e}\033[0m")
        sys.exit(1)

if __name__ == "__main__":
    main()
